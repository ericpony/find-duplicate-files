#! /usr/bin/perl

my @dirs, @lists, @temps, $print_digest, $read_digest, $verbose_mode, $hash_type = 'crc';

use constant false => 0;
use constant true  => 1;

sub usage {
	print STDERR "Usage: $0 [OPTION]... {DIR,FILE}*\n",
	"Options:\n", 
	"\t--checksum=TYPE   Specify the type of checksum. TYPE can be {crc, md5, both}. Default is crc.\n",
	"\t--digest          Do not find duplicates. Instead, print checksums of the files.\n",
	"\t--pipe            Read checksums from STDIN.\n",
	"\t--parallel=N      Change the number of sorts run concurrently to N.\n",
	"\t--verbose         Print debug messages.\n",
	"\t--help            Print this message.\n"
	;
	exit -1; 
}

sub print_duplicate { print "$_[0] $_[1]\n" }

END { 
	foreach (@temps) {
		unlink;
		if(-f $_) { print 'cannot remove '.$_ }
	}
}

foreach (@ARGV) {
	/^--checksum=(\S+)$/  and $hash_type = $1 and next;
	/^--parallel=(\d+)$/  and $parellel = $1 and next;
	/^--digest$/          and $print_digest = true and next;
	/^--pipe$/            and $read_digest = true and next;
	/^--verbose$/         and $verbose_mode = true and next;
	/^--help$/            and &usage;
	-d $_ and push(@dirs, $_) and next;
	-f $_ and push(@lists, $_) and next;
	die "Invalid argument: $_";
}

if(@dirs) {
	use File::Temp qw(tempfile);
	foreach my $dir (@dirs) {
		my ($fh, $fname) = tempfile();
		open(IN,  "/bin/ls -1 $dir | tail -n+2 |");
		open(OUT, "> $fname") or die 'Cannot write to temporary files.';
		print OUT "$dir/$_" while(<IN>);
		push(@temps, $fname);
	}
}

my $source = join(' ', @temps).' '.join(' ', @lists);
my $digest = (!$read_digest&&!$print_digest ? "| $0 --checksum=$hash_type --digest" : '');
my $sort   = (!$print_digest ? "| sort -k 1,1" : '');

open(IN, "cat $source $digest $sort |");

if(!$print_digest) {
	while(true) {
		$_ = <IN> or last;
		/^ *(\S+) +(\S+)/ or die "Invalid entry: $_";

		!$file1 and ($hash1, $file1) = ($1, $2) and next;		

		($hash2, $file2) = ($1, $2);

		$is_duplicate = ($hash1 eq $hash2 and (stat($file1))[1] != (stat($file2))[1]);

		$verbose_mode and print($is_duplicate ? 'o' : 'x', ' ', $file1.':'.$hash1.' '.$file2.':'.$hash2, "\n") and $is_duplicate and next;

		$is_duplicate and &print_duplicate($file1, $file2) and next;
		
		($hash1, $file1) = ($hash2, $file2);
	}
	exit;
}
if($read_digest) {
	while(<IN>) {
		/^ *\S+ +(\S+)/ or die "Invalid entry: $_";
		! -f $1 and ! -d $1 and die "File doesn't exist: $1";
		print;
	}
	exit;
}

use String::CRC32;
use Digest::MD5;
$ctx = Digest::MD5->new;

$mode = 0;
$hash_type eq 'crc'  and $mode = 1;
$hash_type eq 'md5'  and $mode = 2;
$hash_type eq 'both' and $mode = 3;
$mode or die "Invalid digest type: $hash_type";

sub digest {
	open(FILE, $_[0]) or die "Cannot open file $_[0]";
	binmode FILE;

	if($mode&1) { $crc = crc32(*FILE) }
	if($mode&3) { seek FILE, 0, 0 } 
	if($mode&2) { $ctx->addfile(*FILE); $md5 = $ctx->hexdigest } 
	
	if($mode==3) { return $md5.'-'.$crc }
	if($mode==2) { return $md5 }
	if($mode==1) { return $crc }
}

chomp and (-f $_ && -s $_) and print (&digest($_), ' ', $_, "\n") while(<IN>);
